@page "/tochka"
@namespace Client.Pages

<PageTitle>Tochka</PageTitle>

@using BigBeerData.Shared
@using Client.DTOs
@using BigBeerData.Shared.DTOs
@using System.Net.Http
@using System.Threading
@using System.Web
@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor
@using System.Text;

@inject HttpClient Http
@inject Services.BlobService BlobData
@inject Services.BrowserService Browser
@inject ILogger<Tochka> Logger

@inject IJSRuntime JSRuntime



<style>
	.fluid {
		 width: 100%;
		 height: auto;
	}

	.tapLoadBox {
		 width: 100%;
		 height: 100%;
		 background-color: rgba(0,0,0, 0.5);
		 position: absolute;
		 top: 0px;
		 border-radius: 5px;
	}
</style>


<MudGrid>
	@for (int i = 0; i < TAP_COUNT; i++)
	{
		try
		{
			if (costList.Count() > i)
			{
				int localIndex = i + 1;
				string tapLabel = "Tap " + localIndex;
				string fileBox = "fileInput" + localIndex;

				<MudItem xs="12" md="6" lg="4">
					<MudPaper Outlined="true" style=" text-align: center; position: relative; padding: 16px;" >
						<InputFile id="@fileBox" OnChange="(e) => UploadFiles(localIndex, e)" hidden accept="image/png, image/gif, image/jpeg" />

						<MudFab HtmlTag="label"
						  Color="Color.Dark"
						  Icon="@Icons.Filled.Image"
						  label="@tapLabel"
						  for="@fileBox" />											
						<MudImage Fluid="true" Src='@($"https://cs1c08048ede1dax4ddbx836.blob.core.windows.net/bigbeercontainer/{localIndex}.png?m={DateTime.Now.ToBinary()}")'
						 Alt="@tapLabel" Elevation="25" Class="rounded-lg" />

						<MudTextField @bind-Value="costList[localIndex-1].name" Label="Name" Variant="Variant.Text" TextChanged="(t) => updateChanged(t, costList[localIndex-1])" />
						<MudTextField @bind-Value="costList[localIndex-1].brewer" Label="Brewer" Variant="Variant.Text" TextChanged="(t) => updateChanged(t, costList[localIndex-1])" />
						<MudTextField @bind-Value="costList[localIndex-1].beerType" Label="Type" Variant="Variant.Text" TextChanged="(t) => updateChanged(t, costList[localIndex-1])" />
						<MudNumericField @bind-Value="costList[localIndex-1].percentage" Label="Percentage" Variant="Variant.Text" T="decimal" Step="(decimal)0.001" Format="P1" TextChanged="(t) => updateChanged(String.Empty, costList[localIndex-1])" />
						<MudNumericField @bind-Value="costList[localIndex-1].schooner" Label="Schooner" Variant="Variant.Text" T="decimal" Step="(decimal)0.5" Format="C2" TextChanged="(t) => updateChanged(String.Empty, costList[localIndex-1])" />
						<MudNumericField @bind-Value="costList[localIndex-1].squealer" Label="Squealer" Variant="Variant.Text" T="decimal" Step="(decimal)0.5" Format="C2" TextChanged="(t) => updateChanged(String.Empty, costList[localIndex-1])" />
						<MudNumericField @bind-Value="costList[localIndex-1].growler" Label="Growler" Variant="Variant.Text" T="decimal" Step="(decimal)0.5" Format="C2" TextChanged="(t) => updateChanged(String.Empty, costList[localIndex-1])" />
						<MudTextField @bind-Value="costList[localIndex-1].description" Label="Description" Variant="Variant.Filled" Lines="5" TextChanged="(t) => updateChanged(t, costList[localIndex-1])" />

						@if (costList[localIndex - 1].changed){
							<MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.CloudUpload" Color="Color.Success" OnClick="() => UpdateData(localIndex)" >Upload Changes</MudButton>
						}
						
						<div id='@($"loadingBox{localIndex}")' class="tapLoadBox" style="display: none;" @ref=imageRef[localIndex-1]>	</div>

						
					</MudPaper>
				</MudItem>
			}
		}
		catch (Exception)
		{
			var f = i;
			var bob = costList;
		}
	}

</MudGrid>

@code {

	const int TAP_COUNT = 6;

	ElementReference[] imageRef { get; set; } = new ElementReference[TAP_COUNT];
	List<BeerDTO> costList = new List<BeerDTO>();
	IDictionary<int, IBrowserFile> filesD = new Dictionary<int, IBrowserFile>();

	List<File> files = new List<File>();
	List<UploadResult> uploadResults = new List<UploadResult>();
	bool upload = false;

	bool readyForUpdate = false;

	protected override async Task OnInitializedAsync()
	{
		for (int i = 0; i < TAP_COUNT; i++)
		{
			try
			{
				var result = await Http.GetFromJsonAsync<BeerDTO>($"https://cs1c08048ede1dax4ddbx836.blob.core.windows.net/bigbeercontainer/{i + 1}.json?m={DateTime.Now.ToBinary()}");
				costList.Add(result ?? new BeerDTO());
			}
			catch (Exception e)
			{
				Logger.LogError(e.Message);
				costList.Add(new BeerDTO());
			}
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender)
		{
			readyForUpdate = true;
		}
		base.OnAfterRender(firstRender);
	}

	protected void updateChanged(string value, BeerDTO beerDTO)
	{
		if (readyForUpdate)
		{
			beerDTO.changed = true;
		}
	}

	private async void UpdateData(int i)
	{
		var loadBox = imageRef[i - 1];
		await Browser.ShowLoadBox(loadBox);

		var toUpdate = costList[i-1];
		var js = JsonSerializer.Serialize(toUpdate);

		var response =
			await Http.PostAsync("http://localhost:7071/api/DataUpload", new StringContent(JsonSerializer.Serialize(toUpdate), Encoding.UTF8, "application/json"));
		toUpdate.changed = false;
		await Browser.HideLoadBox(loadBox);
		StateHasChanged();
	}

	private async void UploadFiles(int i, InputFileChangeEventArgs e)
	{
		var fileName = e.File.Name;
		fileName = i + fileName.Substring(e.File.Name.LastIndexOf('.'));

		var maxFileSize = 10240000;

		var loadBox = imageRef[i - 1];

		await Browser.ShowLoadBox(loadBox);

		using var content = new MultipartFormDataContent();

		try
		{
			var fileContent =
					new StreamContent(e.File.OpenReadStream(maxFileSize));

			fileContent.Headers.ContentType =
					new MediaTypeHeaderValue(e.File.ContentType);

			files.Add(new() { Name = fileName });

			content.Add(
					content: fileContent,
					name: "\"files\"",
					fileName: fileName);

			upload = true;
		}
		catch (Exception ex)
		{
			Logger.LogInformation(
					"{FileName} not uploaded (Err: 6): {Message}",
					fileName, ex.Message);

			uploadResults.Add(
					new()
						{
							FileName = fileName,
							ErrorCode = 6,
							Uploaded = false
						});
		}
		if (upload)
		{

			var response =
					await Http.PostAsync("http://localhost:7071/api/FileUpload",
					content);

			if (response.IsSuccessStatusCode)
			{
				//Browser.RefreshImage(fileName);
				await Browser.HideLoadBox(loadBox);
				StateHasChanged();

			}
			else
			{

			}
		}
	}

	private static bool FileUpload(IList<UploadResult> uploadResults,
			string? fileName, ILogger<Tochka> logger, out UploadResult result)
	{
		result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

		if (!result.Uploaded)
		{
			logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
			result.ErrorCode = 5;
		}

		return result.Uploaded;
	}

	private class File
	{
		public string? Name { get; set; }
	}

	public class UploadResult
	{
		public bool Uploaded { get; set; }
		public string? FileName { get; set; }
		public string? StoredFileName { get; set; }
		public int ErrorCode { get; set; }
	}
}
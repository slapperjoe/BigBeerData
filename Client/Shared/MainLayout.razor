@inherits LayoutComponentBase

@inject HttpClient Http
@inject Services.BrowserService Service

@using System.Net.Http
@using BigBeerData.Shared
@using Client.Shared

<MudThemeProvider Theme="BeerTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<MudAppBar>
		@if (this.mainSite)
		{
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
		}
		<img src="/img/onthebeers.png" alt="On The Beers/Big Beer Data" style="max-height: 100%;" />
	</MudAppBar>
	@if (this.mainSite)
	{
		<MudDrawer @bind-Open="@_drawerOpen" Class="sidebar">
			<NavMenu parent="@this" />
			<MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="@((e) => UpdateDatabase())" Class="@ReloadAnimation" />
		</MudDrawer>
	}
	<MudMainContent>
		<MudContainer MaxWidth="MaxWidth.False">
			<CascadingValue name="parent" Value="this">
				@Body
			</CascadingValue>
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {

	[CascadingParameter]
	RouteData RouteData { get; set; } = default!;

	bool _drawerOpen = true;

	bool mainSite
	{
		get { return this.RouteData.PageType.Name != "Tochka"; }
	}

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	MudTheme BeerTheme = new MudTheme()
		{
			Palette = new Palette()
			{
				Primary = Colors.Yellow.Default,
				Secondary = Colors.Brown.Darken2,
				AppbarBackground = Colors.Shades.White,
				AppbarText = Colors.Brown.Darken3
			},
		};


	public bool loaded = false;
	public Client.Pages.Index indexRef = default!;
	public List<AreaLocation> locations = default!;
	public int selected = 1;
	public bool updating = false;

	public string ReloadAnimation => updating ? "reload-button reload-spin" : "reload-button";

	public async Task UpdateLocation(int id)
	{
		if (indexRef != null)
		{
			await Task.Run(async () => await indexRef.LocationUpdated(id));
		}
	}


	public void setLoaded(bool loadedValue)
	{
		loaded = loadedValue;
	}

	protected override async Task OnInitializedAsync()
	{
		if (this.mainSite)
		{
			locations = await Http.GetFromJsonAsync<List<AreaLocation>>("api/location/current") ?? new List<AreaLocation>();
		}
		loaded = true;
	}


	protected async Task UpdateDatabase()
	{
		if (!updating && this.mainSite)
		{
			updating = true;
			var updateData = await Http.PostAsync("api/Update", null);
			updating = false;
		}
	}
}

